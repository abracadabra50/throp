name: Environment Sync & Health Check

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    # Run daily at 9 AM UTC to check environment health
    - cron: '0 9 * * *'
  push:
    branches: [main]
    paths:
      - '.env.example'
      - 'package.json'
      - '.github/workflows/environment-sync.yml'

env:
  NODE_VERSION: '20'

jobs:
  environment-health:
    name: Environment Health Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Check Required Secrets
        run: |
          echo "üîç Checking GitHub Secrets Configuration..."
          
          # List of required secrets
          SECRETS=(
            "GCP_SERVICE_ACCOUNT_KEY"
            "NETLIFY_AUTH_TOKEN" 
            "NETLIFY_SITE_ID"
            "ANTHROPIC_API_KEY"
            "PERPLEXITY_API_KEY"
            "TWITTER_API_KEY"
            "TWITTER_API_SECRET_KEY"
            "TWITTER_ACCESS_TOKEN"
            "TWITTER_ACCESS_TOKEN_SECRET"
            "TWITTER_BEARER_TOKEN"
          )
          
          MISSING_SECRETS=()
          
          # Check each secret (we can't read values, just check if they exist)
          for secret in "${SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              MISSING_SECRETS+=("$secret")
            fi
          done
          
          if [ ${#MISSING_SECRETS[@]} -eq 0 ]; then
            echo "‚úÖ All required secrets are configured"
          else
            echo "‚ö†Ô∏è Missing secrets:"
            printf '%s\n' "${MISSING_SECRETS[@]}"
            echo ""
            echo "Please configure missing secrets in GitHub Settings > Secrets and variables > Actions"
          fi
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET_KEY: ${{ secrets.TWITTER_API_SECRET_KEY }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}

      - name: Test GCP Connection
        if: env.GCP_SERVICE_ACCOUNT_KEY != ''
        run: |
          echo "üîß Testing GCP connection..."
          
          # Create service account key file
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > gcp-key.json
          
          # Authenticate with GCP
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project throp-469410
          
          # Test Cloud Run access
          if gcloud run services list --region=us-central1 --format="value(metadata.name)" | grep -q "throp-bot"; then
            echo "‚úÖ GCP Cloud Run service found"
          else
            echo "‚ö†Ô∏è GCP Cloud Run service 'throp-bot' not found"
          fi
          
          # Cleanup
          rm gcp-key.json
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Test Netlify Connection
        if: env.NETLIFY_AUTH_TOKEN != '' && env.NETLIFY_SITE_ID != ''
        run: |
          echo "üåê Testing Netlify connection..."
          
          # Install Netlify CLI
          npm install -g netlify-cli
          
          # Test site access
          if netlify sites:list --json | jq -r '.[].id' | grep -q "$NETLIFY_SITE_ID"; then
            echo "‚úÖ Netlify site accessible"
          else
            echo "‚ö†Ô∏è Netlify site not found or access denied"
          fi
          
          # Get site info
          netlify api getSite --data='{"site_id":"'$NETLIFY_SITE_ID'"}' | jq '.name, .url'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Test API Keys
        run: |
          echo "ü§ñ Testing API key formats..."
          
          # Test Anthropic API key format
          if [[ "$ANTHROPIC_API_KEY" =~ ^sk-ant- ]]; then
            echo "‚úÖ Anthropic API key format valid"
          else
            echo "‚ö†Ô∏è Anthropic API key format invalid or missing"
          fi
          
          # Test Perplexity API key format  
          if [[ "$PERPLEXITY_API_KEY" =~ ^pplx- ]]; then
            echo "‚úÖ Perplexity API key format valid"
          else
            echo "‚ö†Ô∏è Perplexity API key format invalid or missing"
          fi
          
          # Test Twitter Bearer token format (based on X API investigation)
          if [[ "$TWITTER_BEARER_TOKEN" =~ ^AAAA ]] && [[ "$TWITTER_BEARER_TOKEN" == *"%"* ]]; then
            echo "‚úÖ Twitter Bearer token format valid (URL-encoded)"
          elif [[ "$TWITTER_BEARER_TOKEN" =~ ^AAAA ]]; then
            echo "‚ö†Ô∏è Twitter Bearer token may not be URL-encoded (potential auth issue)"
          else
            echo "‚ö†Ô∏è Twitter Bearer token format invalid or missing"
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}

  deployment-health:
    name: Deployment Health Check
    runs-on: ubuntu-latest
    needs: [environment-health]
    
    steps:
      - name: Test Backend Endpoints
        run: |
          echo "üîç Testing backend endpoints..."
          
          BACKEND_URL="https://throp-bot-947985992378.us-central1.run.app"
          
          # Health check
          if curl -sf "$BACKEND_URL/health" > /dev/null; then
            echo "‚úÖ Backend health endpoint responding"
          else
            echo "‚ùå Backend health endpoint not responding"
          fi
          
          # Status endpoint
          if curl -sf "$BACKEND_URL/api/status" > /dev/null; then
            echo "‚úÖ Backend status endpoint responding"
          else
            echo "‚ö†Ô∏è Backend status endpoint not responding"
          fi
          
          # Twitter diagnostics with detailed checking
          TWITTER_DIAG=$(curl -s "$BACKEND_URL/api/twitter/diagnostics" --max-time 30)
          
          if echo "$TWITTER_DIAG" | grep -q "readCapability"; then
            echo "‚úÖ Twitter diagnostics endpoint responding"
            
            # Check specific capabilities based on X API investigation
            if echo "$TWITTER_DIAG" | grep -q '"readCapability":true'; then
              echo "‚úÖ X API read capability confirmed"
            else
              echo "‚ö†Ô∏è X API read capability disabled - bearer token may be invalid"
            fi
            
            if echo "$TWITTER_DIAG" | grep -q '"writeCapability":true'; then
              echo "‚úÖ X API write capability confirmed"
            else
              echo "‚ö†Ô∏è X API write capability disabled"
            fi
          else
            echo "‚ùå Twitter diagnostics endpoint failed"
            echo "Response: $TWITTER_DIAG"
          fi

      - name: Test Frontend
        run: |
          echo "üåê Testing frontend..."
          
          FRONTEND_URL="https://throp.ai"
          
          # Main page
          if curl -sf "$FRONTEND_URL" > /dev/null; then
            echo "‚úÖ Frontend main page responding"
          else
            echo "‚ùå Frontend main page not responding"
          fi
          
          # Netlify function
          RESPONSE=$(curl -s -X POST "$FRONTEND_URL/.netlify/functions/chat-proxy" \
            -H "Content-Type: application/json" \
            -d '{"messages":[{"role":"user","content":"health check"}]}' \
            --fail-with-body || echo "function-not-ready")
          
          if echo "$RESPONSE" | grep -q "function-not-ready"; then
            echo "‚ö†Ô∏è Netlify chat function may not be configured"
          else
            echo "‚úÖ Netlify chat function responding"
          fi

  create-issue-on-failure:
    name: Create Issue on Failure
    needs: [environment-health, deployment-health]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Environment Health Check Failed - ${new Date().toISOString()}`,
              body: `The environment health check workflow failed. Please check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.

**Possible issues:**
- Missing or invalid GitHub secrets
- GCP service account permissions
- Netlify authentication issues
- API key format problems
- Deployment endpoint failures

**Next steps:**
1. Review workflow logs for specific errors
2. Verify all required secrets are configured
3. Test API keys and service connections
4. Check deployment status in GCP and Netlify dashboards`,
              labels: ['environment', 'urgent', 'ci-cd']
            })
