name: Scheduled Health Check

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  health-check:
    name: Check Service Health
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Backend API Health
        id: backend-health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://throp-bot-947985992378.us-central1.run.app/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Backend is healthy"
            echo "backend_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Backend is down! HTTP: $response"
            echo "backend_status=unhealthy" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Check Frontend Health
        id: frontend-health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://throp.ai)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Frontend is healthy"
            echo "frontend_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Frontend is down! HTTP: $response"
            echo "frontend_status=unhealthy" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Check API Functionality
        if: success()
        run: |
          # Test chat endpoint
          echo "Testing chat API..."
          response=$(curl -s -X POST https://throp-bot-947985992378.us-central1.run.app/api/chat \
            -H "Content-Type: application/json" \
            -d '{"message": "health check test"}' \
            -w "\n%{http_code}")
          
          http_code=$(echo "$response" | tail -n 1)
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Chat API is functional"
          else
            echo "‚ö†Ô∏è Chat API returned: $http_code"
          fi
          
          # Test hot takes endpoint
          echo "Testing hot takes..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://throp-bot-947985992378.us-central1.run.app/api/hot-takes)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Hot takes endpoint is functional"
          else
            echo "‚ö†Ô∏è Hot takes returned: $response"
          fi
      
      - name: Check Twitter Bot Status
        if: success()
        continue-on-error: true
        run: |
          # Check if bot service is running
          echo "Checking Twitter bot status..."
          response=$(curl -s https://throp-bot-947985992378.us-central1.run.app/api/status | jq -r '.twitter.connected')
          if [ "$response" = "true" ]; then
            echo "‚úÖ Twitter bot is connected"
          else
            echo "‚ö†Ô∏è Twitter bot might be disconnected"
          fi
      
      - name: Summary
        if: always()
        run: |
          echo "## Health Check Summary"
          echo "- Backend: ${{ steps.backend-health.outputs.backend_status || 'unknown' }}"
          echo "- Frontend: ${{ steps.frontend-health.outputs.frontend_status || 'unknown' }}"
          echo "- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
      
      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Service Health Check Failed - ${new Date().toISOString()}`,
              body: `The scheduled health check failed.\n\n**Services:**\n- Backend: ${{ steps.backend-health.outputs.backend_status || 'failed' }}\n- Frontend: ${{ steps.frontend-health.outputs.frontend_status || 'failed' }}\n\nPlease check:\n- [GCP Cloud Run Console](https://console.cloud.google.com/run)\n- [Netlify Dashboard](https://app.netlify.com)`,
              labels: ['bug', 'monitoring']
            })