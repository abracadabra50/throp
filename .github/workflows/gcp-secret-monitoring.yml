name: GCP Secret Manager Monitoring

on:
  schedule:
    # Run every 4 hours for critical monitoring
    - cron: '0 */4 * * *'
    # Run daily balance check at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:  # Manual trigger
  push:
    branches: [main]
    paths:
      - '.github/workflows/gcp-secret-monitoring.yml'

env:
  NODE_VERSION: '20'
  GCP_PROJECT_ID: 'throp-469410'
  GCP_REGION: 'us-central1'

jobs:
  setup-gcp-secrets:
    name: Setup GCP Secret Manager
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Check and Create Secrets in GCP Secret Manager
        run: |
          echo "üîê Checking GCP Secret Manager..."
          
          # List of secrets we need
          REQUIRED_SECRETS=(
            "ANTHROPIC_API_KEY"
            "PERPLEXITY_API_KEY"
            "TWITTER_API_KEY"
            "TWITTER_API_SECRET_KEY"
            "TWITTER_ACCESS_TOKEN"
            "TWITTER_ACCESS_TOKEN_SECRET"
            "TWITTER_BEARER_TOKEN"
            "TWITTER_BOT_USER_ID"
          )
          
          # Check which secrets exist
          echo "Checking existing secrets..."
          EXISTING_SECRETS=$(gcloud secrets list --format="value(name)" 2>/dev/null || echo "")
          
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if echo "$EXISTING_SECRETS" | grep -q "^$secret$"; then
              echo "‚úÖ Secret $secret exists in GCP Secret Manager"
            else
              echo "‚ö†Ô∏è Secret $secret NOT found in GCP Secret Manager"
              echo "   Creating placeholder secret (you'll need to add the actual value)"
              
              # Create secret with placeholder value
              echo "PLACEHOLDER_VALUE_REPLACE_ME" | gcloud secrets create "$secret" \
                --data-file=- \
                --replication-policy="automatic" || echo "Failed to create $secret"
            fi
          done
          
          echo ""
          echo "üìã All secrets status:"
          gcloud secrets list --format="table(name,createTime)"

  api-balance-monitoring-gcp:
    name: API Balance Monitoring (GCP Secrets)
    runs-on: ubuntu-latest
    needs: [setup-gcp-secrets]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Retrieve Secrets from GCP and Test APIs
        id: gcp-api-test
        run: |
          echo "üîë Retrieving secrets from GCP Secret Manager..."
          
          # Function to get secret value
          get_secret() {
            gcloud secrets versions access latest --secret="$1" 2>/dev/null || echo "MISSING"
          }
          
          # Get API keys from GCP Secret Manager
          ANTHROPIC_API_KEY=$(get_secret "ANTHROPIC_API_KEY")
          PERPLEXITY_API_KEY=$(get_secret "PERPLEXITY_API_KEY")
          TWITTER_BEARER_TOKEN=$(get_secret "TWITTER_BEARER_TOKEN")
          
          echo "üß™ Testing APIs with GCP-stored credentials..."
          
          # Test Anthropic API
          if [[ "$ANTHROPIC_API_KEY" != "MISSING" ]] && [[ "$ANTHROPIC_API_KEY" != "PLACEHOLDER_VALUE_REPLACE_ME" ]]; then
            echo "Testing Anthropic API..."
            ANTHROPIC_RESPONSE=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
              -H "Content-Type: application/json" \
              -H "x-api-key: $ANTHROPIC_API_KEY" \
              -H "anthropic-version: 2023-06-01" \
              -d '{"model": "claude-3-haiku-20240307", "max_tokens": 10, "messages": [{"role": "user", "content": "test"}]}' \
              --max-time 30 || echo "ERROR")
            
            if echo "$ANTHROPIC_RESPONSE" | grep -q "content\|error"; then
              echo "‚úÖ Anthropic API responding with GCP secret"
            else
              echo "‚ùå Anthropic API failed with GCP secret"
              echo "Response: $ANTHROPIC_RESPONSE"
            fi
          else
            echo "‚ö†Ô∏è Anthropic API key not properly configured in GCP Secret Manager"
          fi
          
          # Test Perplexity API
          if [[ "$PERPLEXITY_API_KEY" != "MISSING" ]] && [[ "$PERPLEXITY_API_KEY" != "PLACEHOLDER_VALUE_REPLACE_ME" ]]; then
            echo "Testing Perplexity API..."
            PERPLEXITY_RESPONSE=$(curl -s -X POST "https://api.perplexity.ai/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $PERPLEXITY_API_KEY" \
              -d '{"model": "sonar-small-online", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' \
              --max-time 30 || echo "ERROR")
            
            if echo "$PERPLEXITY_RESPONSE" | grep -q "choices\|error"; then
              echo "‚úÖ Perplexity API responding with GCP secret"
            else
              echo "‚ùå Perplexity API failed with GCP secret"
              echo "Response: $PERPLEXITY_RESPONSE"
            fi
          else
            echo "‚ö†Ô∏è Perplexity API key not properly configured in GCP Secret Manager"
          fi
          
          # Test X API
          if [[ "$TWITTER_BEARER_TOKEN" != "MISSING" ]] && [[ "$TWITTER_BEARER_TOKEN" != "PLACEHOLDER_VALUE_REPLACE_ME" ]]; then
            echo "Testing X API..."
            X_RESPONSE=$(curl -s "https://api.twitter.com/1.1/application/rate_limit_status.json" \
              -H "Authorization: Bearer $TWITTER_BEARER_TOKEN" \
              -H "User-Agent: throp-gcp-monitoring" \
              --max-time 30 || echo "ERROR")
            
            if echo "$X_RESPONSE" | grep -q "resources\|rate_limit_context"; then
              echo "‚úÖ X API responding with GCP secret"
            else
              echo "‚ùå X API failed with GCP secret"
              echo "Response: $X_RESPONSE"
            fi
          else
            echo "‚ö†Ô∏è X API Bearer token not properly configured in GCP Secret Manager"
          fi

  system-health-with-gcp:
    name: System Health Check (GCP Integration)
    runs-on: ubuntu-latest
    needs: [api-balance-monitoring-gcp]
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Test Backend with GCP Secrets Integration
        run: |
          echo "üåê Testing backend integration with GCP Secret Manager..."
          
          BACKEND_URL="https://throp-bot-947985992378.us-central1.run.app"
          
          # Test that backend can access GCP secrets
          echo "Testing backend health..."
          HEALTH_RESPONSE=$(curl -s "$BACKEND_URL/health" --max-time 30)
          
          if echo "$HEALTH_RESPONSE" | grep -q '"status":"ok"'; then
            echo "‚úÖ Backend healthy and can access GCP environment"
          else
            echo "‚ùå Backend health check failed"
            echo "Response: $HEALTH_RESPONSE"
          fi
          
          # Test Twitter diagnostics (should use GCP secrets)
          echo "Testing Twitter diagnostics with GCP secrets..."
          TWITTER_DIAG=$(curl -s "$BACKEND_URL/api/twitter/diagnostics" --max-time 30)
          
          if echo "$TWITTER_DIAG" | grep -q "readCapability\|writeCapability"; then
            echo "‚úÖ Backend Twitter integration working with GCP secrets"
            
            # Check specific capabilities
            if echo "$TWITTER_DIAG" | grep -q '"readCapability":true'; then
              echo "‚úÖ X API read capability confirmed (using GCP secrets)"
            else
              echo "‚ö†Ô∏è X API read capability disabled - check GCP secret values"
            fi
          else
            echo "‚ùå Backend Twitter diagnostics failed"
            echo "Response: $TWITTER_DIAG"
          fi

  create-gcp-alerts:
    name: Create GCP Secret Manager Alerts
    needs: [setup-gcp-secrets, api-balance-monitoring-gcp, system-health-with-gcp]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs fail
    
    steps:
      - name: Create GCP Secret Configuration Alert
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = `üîê GCP Secret Manager Configuration Issue - ${new Date().toISOString()}`;
            const body = `## GCP Secret Manager Alert
            
            There are issues with the GCP Secret Manager configuration or API testing:
            
            ## Issues Detected
            
            - Some API keys may not be properly stored in GCP Secret Manager
            - API authentication tests are failing
            - Backend may not be able to access GCP secrets properly
            
            ## Immediate Actions Required
            
            1. **Check GCP Secret Manager**: Go to [GCP Secret Manager Console](https://console.cloud.google.com/security/secret-manager?project=throp-469410)
            2. **Update Secret Values**: Replace any placeholder values with real API keys:
               - \`ANTHROPIC_API_KEY\`: Your Claude API key
               - \`PERPLEXITY_API_KEY\`: Your Perplexity API key  
               - \`TWITTER_BEARER_TOKEN\`: Your X API bearer token
               - \`TWITTER_API_KEY\`: Your X API key
               - \`TWITTER_API_SECRET_KEY\`: Your X API secret
               - \`TWITTER_ACCESS_TOKEN\`: Your X access token
               - \`TWITTER_ACCESS_TOKEN_SECRET\`: Your X access token secret
               - \`TWITTER_BOT_USER_ID\`: Your bot's user ID (1956873492420608000)
            
            3. **Verify Service Account Permissions**: Ensure the GCP service account has Secret Manager access
            4. **Test Backend Integration**: Check that your backend can access the secrets
            
            ## How to Update Secrets
            
            \`\`\`bash
            # Update a secret value
            echo "YOUR_ACTUAL_API_KEY" | gcloud secrets versions add ANTHROPIC_API_KEY --data-file=-
            
            # List all secrets
            gcloud secrets list
            
            # View secret metadata (not the value)
            gcloud secrets describe ANTHROPIC_API_KEY
            \`\`\`
            
            ## Benefits of GCP Secret Manager
            
            - ‚úÖ Centralized secret management
            - ‚úÖ Automatic encryption at rest
            - ‚úÖ Access logging and auditing
            - ‚úÖ Fine-grained IAM permissions
            - ‚úÖ No need to manage GitHub Secrets for API keys
            
            ## Monitoring Details
            
            Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed information.
            
            ---
            *This alert was automatically generated by the GCP Secret Manager monitoring system.*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['monitoring', 'gcp-secrets', 'urgent', 'auto-generated']
            });

      - name: Create Success Summary for GCP Integration
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const title = `‚úÖ GCP Secret Manager Integration Working - ${new Date().toISOString()}`;
            const body = `## GCP Secret Manager Success Report
            
            All systems are working correctly with GCP Secret Manager! üéâ
            
            **Integration Status**: All APIs responding normally using GCP-stored secrets
            **Secret Management**: Centralized in GCP Secret Manager  
            **Security**: Enhanced with GCP IAM and encryption
            
            ## System Overview
            
            - ‚úÖ **Backend**: Using GCP secrets successfully
            - ‚úÖ **Anthropic API**: Authenticated via GCP Secret Manager
            - ‚úÖ **Perplexity API**: Authenticated via GCP Secret Manager  
            - ‚úÖ **X API**: Authenticated via GCP Secret Manager
            
            ## Next Steps
            
            Your system is now using GCP Secret Manager instead of GitHub Secrets for API keys. This provides:
            - Better security with encryption at rest
            - Centralized secret management
            - Access logging and auditing
            - No need to manage multiple GitHub Secrets
            
            ---
            *GCP Secret Manager integration is working perfectly!*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['monitoring', 'gcp-secrets', 'success', 'auto-generated']
            });
