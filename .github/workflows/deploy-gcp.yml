name: Deploy to Google Cloud Platform

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

env:
  NODE_VERSION: '20'
  GCP_PROJECT_ID: 'throp-469410'
  GCP_REGION: 'us-central1'
  GCP_SERVICE_NAME: 'throp-bot'

jobs:
  # 1. Run tests and build
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps
      
      - name: Run linter
        run: npm run lint
        continue-on-error: true  # Don't fail on lint warnings
      
      - name: Build project
        run: npm run build
      
      - name: Build frontend
        run: |
          cd web
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps
          npm run build
        continue-on-error: true  # Frontend build is separate

  # 2. Deploy Backend to GCP Cloud Run
  deploy-backend:
    name: Deploy Backend to GCP
    needs: [test-and-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker
      
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.GCP_SERVICE_NAME }} \
            --source . \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --quiet
      
      - name: Get Service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.GCP_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Backend deployed to: $SERVICE_URL"
      
      - name: Health Check
        run: |
          sleep 30  # Wait for deployment to stabilize
          curl -f ${{ steps.get-url.outputs.service_url }}/health || exit 1
          echo "âœ… Backend health check passed!"

  # 3. Deploy Frontend to Netlify
  deploy-frontend:
    name: Deploy Frontend to Netlify
    needs: [test-and-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      
      - name: Install dependencies and build
        run: |
          cd web
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps
          npm run build
      
      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          cd web
          netlify deploy --prod --dir=.next
      
      - name: Frontend Health Check
        run: |
          sleep 20
          curl -f https://throp.ai || exit 1
          echo "âœ… Frontend health check passed!"

  # 4. Smoke Tests
  smoke-tests:
    name: Run Smoke Tests
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
      - name: Test Chat API
        run: |
          echo "Testing chat endpoint..."
          curl -X POST https://throp-bot-947985992378.us-central1.run.app/api/chat \
            -H "Content-Type: application/json" \
            -d '{"message": "hello"}' \
            --fail-with-body || exit 1
      
      - name: Test Hot Takes
        run: |
          echo "Testing hot takes endpoint..."
          curl https://throp-bot-947985992378.us-central1.run.app/api/hot-takes \
            --fail-with-body || exit 1
      
      - name: Test Frontend Proxy
        run: |
          echo "Testing frontend chat proxy..."
          curl -X POST https://throp.ai/.netlify/functions/chat-proxy \
            -H "Content-Type: application/json" \
            -d '{"messages":[{"role":"user","content":"test"}]}' \
            --fail || echo "Chat proxy test completed"
      
      - name: Success Notification
        run: |
          echo "ðŸŽ‰ All deployments successful!"
          echo "Backend: https://throp-bot-947985992378.us-central1.run.app"
          echo "Frontend: https://throp.ai"

  # 5. Rollback notification (manual process)
  notify-on-failure:
    name: Notify on Failure
    needs: [deploy-backend, deploy-frontend, smoke-tests]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Deployment Failed - ${new Date().toISOString()}`,
              body: `The deployment workflow failed. Please check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              **Manual rollback may be required:**
              - GCP: Use Cloud Console to roll back to previous revision
              - Netlify: Use Netlify dashboard to roll back to previous deploy`,
              labels: ['deployment', 'urgent']
            })
